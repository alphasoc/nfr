name: builder-releaser

on:
  push:
  pull_request:

permissions:
  contents: write

jobs:
  build-test-vet:
    runs-on: ubuntu-latest
    steps:
      -
        name: Install Build Dependencies
        run: sudo apt-get install libpcap-dev
      -
        # Don't forget to install git on the build host.
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Build
        run: go build -v ./...
      -
        name: Test
        run: go test -v ./...
      -
        name: Vet
        run: go vet -v ./...
  release-deb:
    #needs: build-test-vet
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      -
        name: Install Build Dependencies
        run: sudo apt-get install libpcap-dev
      -
        # Don't forget to install git on the build host.
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
      -
        name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release -f ./.goreleaser-deb.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      -
        name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: deb-artifacts
          path: dist
  release-centos-7:
    #needs: build-test-vet
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    container: centos:7
    steps:
      -
        name: Install Build Dependencies
        run: |
          yum -y install git
          yum -y install libpcap-devel
          yum -y install gcc
      -
        # Don't forget to install git on the build host.
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Start GPG Agent
        run: eval $(gpg-agent --daemon -s)
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
      -
        name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release -f ./.goreleaser-el7.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      -
        name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: el7-artifacts
          path: dist

  release-centos-latest:
    #needs: build-test-vet
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    container: centos:latest
    steps:
      -
        name: Install Build Dependencies
        run: |
          yum -y install dnf-plugins-core
          yum -y config-manager --set-enabled powertools
          yum -y install libpcap-devel
          yum -y install git
          yum -y install gcc
      -
        # Don't forget to install git on the build host.
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Start GPG Agent
        run: eval $(gpg-agent --daemon -s)
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
      -
        name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release -f ./.goreleaser-el8.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      -
        name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: el-latest-artifacts
          path: dist

  release-artifacts:
    needs: [release-deb, release-centos-latest]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      -
        name: Download All Artifacts
        uses: actions/download-artifact@v2
      -
        name: Display
        run: |
          pwd
          ls -R
      -
        name: Copy CHANGELOG and Checksums
        run: |
          sudo mkdir rel
          sudo mv deb-artifacts/CHANGELOG.md rel/
          sudo mv deb-artifacts/*checksums* rel/
          sudo mv el-latest-artifacts/*checksums* rel/
          #for f in deb-artifacts/*_checksums*; do name=$(basename $f); sudo mv $f rel/${.*}-deb.${name##*}; done
          #for f in el-latest-artifacts/*_checksums*; do name=$(basename $f); sudo mv $f rel/${.*}-el8.${name##*}; done
      -
        name: Copy Binaries
        run: |
          sudo mv deb-artifacts/*.tar.gz* rel/
          sudo mv deb-artifacts/*.deb** rel/
          sudo mv el-latest-artifacts/*.tar.gz* rel/
          sudo mv el-latest-artifacts/*.rpm* rel/
          #for f in deb-artifacts/*_linux_*; do [ -f $f ] && sudo cp $f rel/$(basename $f)-DEB; done
          #for f in deb-artifacts/*_windows_*; do [ -f $f ] && sudo cp $f rel/$(basename $f)-DEB; done
          #for f in el-latest-artifacts/*_linux_*; do [ -f $f ] && sudo cp $f rel/$(basename $f)-EL8; done
      -
        name: Display Again        
        run: |
          pwd
          ls -R
          cat rel/CHANGELOG.md
          cat rel/*_checksums*
      -
        name: Cleanup
        run: |
          sudo rm -rf deb-artifacts
          sudo rm -rf el-latest-artifacts
          sudo mv rel /home/runner/work/nfr-rel
      -
        # Don't forget to install git on the build host.
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Prep rel location
        run: |
          sudo mv /home/runner/work/nfr-rel /home/runner/work/nfr/nfr
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Start GPG Agent
        run: eval $(gpg-agent --daemon -s)
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
      -
        name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release -f ./.goreleaser-release.yml --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
